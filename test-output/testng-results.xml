<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="31" passed="28" failed="3" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-11-19T18:42:15 IST" name="Suite" finished-at="2024-11-19T19:11:43 IST" duration-ms="1768319">
    <groups>
    </groups>
    <test started-at="2024-11-19T18:42:15 IST" name="Login" finished-at="2024-11-19T18:42:42 IST" duration-ms="26647">
      <class name="New_property_Wadhghat.Login">
        <test-method is-config="true" signature="beforetest()[pri:0, instance:New_property_Wadhghat.Login@3c41ed1d]" started-at="2024-11-19T18:42:15 IST" name="beforetest" finished-at="2024-11-19T18:42:24 IST" duration-ms="9040" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="loginPage()[pri:1, instance:New_property_Wadhghat.Login@3c41ed1d]" started-at="2024-11-19T18:42:24 IST" name="loginPage" finished-at="2024-11-19T18:42:42 IST" duration-ms="17572" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginPage -->
      </class> <!-- New_property_Wadhghat.Login -->
    </test> <!-- Login -->
    <test started-at="2024-11-19T18:42:42 IST" name="CreateNewProperty" finished-at="2024-11-19T18:51:35 IST" duration-ms="533527">
      <class name="New_property_Wadhghat.CMS_Test">
        <test-method is-config="true" signature="beforetest()[pri:0, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:42:42 IST" name="beforetest" finished-at="2024-11-19T18:42:42 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method signature="cmsPageWadhghat()[pri:2, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:42:42 IST" name="cmsPageWadhghat" finished-at="2024-11-19T18:42:56 IST" duration-ms="14681" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cmsPageWadhghat -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:42:56 IST" name="aftermethod" finished-at="2024-11-19T18:42:57 IST" duration-ms="770" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=cmsPageWadhghat status=SUCCESS method=CMS_Test.cmsPageWadhghat()[pri:2, instance:New_property_Wadhghat.CMS_Test@5644dc81] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void New_property_Wadhghat.CMS_Test.cmsPageWadhghat() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="cmsRegisterPageWadhghat()[pri:3, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:42:57 IST" name="cmsRegisterPageWadhghat" finished-at="2024-11-19T18:43:12 IST" duration-ms="15314" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cmsRegisterPageWadhghat -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:43:12 IST" name="aftermethod" finished-at="2024-11-19T18:43:13 IST" duration-ms="208" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=cmsRegisterPageWadhghat status=SUCCESS method=CMS_Test.cmsRegisterPageWadhghat()[pri:3, instance:New_property_Wadhghat.CMS_Test@5644dc81] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void New_property_Wadhghat.CMS_Test.cmsRegisterPageWadhghat() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="cmsComplaintRegisterWadhghat()[pri:4, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:43:13 IST" name="cmsComplaintRegisterWadhghat" finished-at="2024-11-19T18:43:31 IST" depends-on-methods="New_property_Wadhghat.CMS_Test.cmsRegisterPageWadhghat" duration-ms="18351" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cmsComplaintRegisterWadhghat -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:43:31 IST" name="aftermethod" finished-at="2024-11-19T18:43:31 IST" duration-ms="228" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=cmsComplaintRegisterWadhghat status=SUCCESS method=CMS_Test.cmsComplaintRegisterWadhghat()[pri:4, instance:New_property_Wadhghat.CMS_Test@5644dc81] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void New_property_Wadhghat.CMS_Test.cmsComplaintRegisterWadhghat() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="searchComplaintWadhghat()[pri:5, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:43:31 IST" name="searchComplaintWadhghat" finished-at="2024-11-19T18:44:15 IST" depends-on-methods="New_property_Wadhghat.CMS_Test.cmsComplaintRegisterWadhghat" duration-ms="43424" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchComplaintWadhghat -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:44:15 IST" name="aftermethod" finished-at="2024-11-19T18:44:15 IST" duration-ms="232" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=searchComplaintWadhghat status=SUCCESS method=CMS_Test.searchComplaintWadhghat()[pri:5, instance:New_property_Wadhghat.CMS_Test@5644dc81] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void New_property_Wadhghat.CMS_Test.searchComplaintWadhghat() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="Dataentry_owner_info()[pri:6, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:44:15 IST" name="Dataentry_owner_info" finished-at="2024-11-19T18:44:49 IST" depends-on-methods="New_property_Wadhghat.CMS_Test.searchComplaintWadhghat" duration-ms="34489" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Dataentry_owner_info -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:44:49 IST" name="aftermethod" finished-at="2024-11-19T18:44:50 IST" duration-ms="418" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Dataentry_owner_info status=SUCCESS method=CMS_Test.Dataentry_owner_info()[pri:6, instance:New_property_Wadhghat.CMS_Test@5644dc81] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void New_property_Wadhghat.CMS_Test.Dataentry_owner_info() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="Dataentry_floor_info()[pri:7, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:44:50 IST" name="Dataentry_floor_info" finished-at="2024-11-19T18:45:49 IST" depends-on-methods="New_property_Wadhghat.CMS_Test.Dataentry_owner_info" duration-ms="58775" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Dataentry_floor_info -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:45:49 IST" name="aftermethod" finished-at="2024-11-19T18:45:49 IST" duration-ms="192" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Dataentry_floor_info status=SUCCESS method=CMS_Test.Dataentry_floor_info()[pri:7, instance:New_property_Wadhghat.CMS_Test@5644dc81] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void New_property_Wadhghat.CMS_Test.Dataentry_floor_info() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="OldTaxex_info()[pri:8, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:45:49 IST" name="OldTaxex_info" finished-at="2024-11-19T18:47:23 IST" depends-on-methods="New_property_Wadhghat.CMS_Test.Dataentry_floor_info" duration-ms="94192" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OldTaxex_info -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:47:23 IST" name="aftermethod" finished-at="2024-11-19T18:47:23 IST" duration-ms="362" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=OldTaxex_info status=SUCCESS method=CMS_Test.OldTaxex_info()[pri:8, instance:New_property_Wadhghat.CMS_Test@5644dc81] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void New_property_Wadhghat.CMS_Test.OldTaxex_info() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="AddTaxes_and_UploadFiles()[pri:9, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:47:23 IST" name="AddTaxes_and_UploadFiles" finished-at="2024-11-19T18:49:23 IST" depends-on-methods="New_property_Wadhghat.CMS_Test.OldTaxex_info" duration-ms="119702" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddTaxes_and_UploadFiles -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:49:23 IST" name="aftermethod" finished-at="2024-11-19T18:49:23 IST" duration-ms="286" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddTaxes_and_UploadFiles status=SUCCESS method=CMS_Test.AddTaxes_and_UploadFiles()[pri:9, instance:New_property_Wadhghat.CMS_Test@5644dc81] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void New_property_Wadhghat.CMS_Test.AddTaxes_and_UploadFiles() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="WadhghatApproval()[pri:10, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:49:23 IST" name="WadhghatApproval" finished-at="2024-11-19T18:49:42 IST" depends-on-methods="New_property_Wadhghat.CMS_Test.AddTaxes_and_UploadFiles" duration-ms="18277" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WadhghatApproval -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:49:42 IST" name="aftermethod" finished-at="2024-11-19T18:49:42 IST" duration-ms="225" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=WadhghatApproval status=SUCCESS method=CMS_Test.WadhghatApproval()[pri:10, instance:New_property_Wadhghat.CMS_Test@5644dc81] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void New_property_Wadhghat.CMS_Test.WadhghatApproval() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="councilapproval()[pri:11, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:49:42 IST" name="councilapproval" finished-at="2024-11-19T18:51:08 IST" depends-on-methods="New_property_Wadhghat.CMS_Test.WadhghatApproval" duration-ms="86243" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- councilapproval -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:51:08 IST" name="aftermethod" finished-at="2024-11-19T18:51:08 IST" duration-ms="247" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=councilapproval status=SUCCESS method=CMS_Test.councilapproval()[pri:11, instance:New_property_Wadhghat.CMS_Test@5644dc81] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[private void New_property_Wadhghat.CMS_Test.councilapproval() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="SearchOnCounter()[pri:12, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:51:08 IST" name="SearchOnCounter" finished-at="2024-11-19T18:51:35 IST" duration-ms="26521" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id='ContentPlaceHolder1_GVPropTax']/tbody/tr[4]/td[21]"}
  (Session info: chrome=131.0.6778.70)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.19.1', revision: 'abe0ee07dc'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [4e277b93d3c12726cb47cdfbd0d5d771, findElement {using=xpath, value=//*[@id='ContentPlaceHolder1_GVPropTax']/tbody/tr[4]/td[21]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 131.0.6778.70, chrome: {chromedriverVersion: 131.0.6778.69 (77e2244bbcda..., userDataDir: C:\Users\STHAPA~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:62654}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:62654/devtoo..., se:cdpVersion: 131.0.6778.70, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 4e277b93d3c12726cb47cdfbd0d5d771]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id='ContentPlaceHolder1_GVPropTax']/tbody/tr[4]/td[21]"}
  (Session info: chrome=131.0.6778.70)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.19.1', revision: 'abe0ee07dc'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [4e277b93d3c12726cb47cdfbd0d5d771, findElement {using=xpath, value=//*[@id='ContentPlaceHolder1_GVPropTax']/tbody/tr[4]/td[21]}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 131.0.6778.70, chrome: {chromedriverVersion: 131.0.6778.69 (77e2244bbcda..., userDataDir: C:\Users\STHAPA~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:62654}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:62654/devtoo..., se:cdpVersion: 131.0.6778.70, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 4e277b93d3c12726cb47cdfbd0d5d771
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:501)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:485)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:355)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:349)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy15.getText(Unknown Source)
at pom.OfflinePaymentPage.getOfflineScreenDetails(OfflinePaymentPage.java:213)
at New_property_Wadhghat.CMS_Test.SearchOnCounter(CMS_Test.java:539)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchOnCounter -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:51:35 IST" name="aftermethod" finished-at="2024-11-19T18:51:35 IST" duration-ms="288" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=SearchOnCounter status=FAILURE method=CMS_Test.SearchOnCounter()[pri:12, instance:New_property_Wadhghat.CMS_Test@5644dc81] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[private void New_property_Wadhghat.CMS_Test.SearchOnCounter() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:New_property_Wadhghat.CMS_Test@5644dc81]" started-at="2024-11-19T18:51:35 IST" name="tearDown" finished-at="2024-11-19T18:51:35 IST" duration-ms="33" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- New_property_Wadhghat.CMS_Test -->
    </test> <!-- CreateNewProperty -->
    <test started-at="2024-11-19T18:51:35 IST" name="Online Counter Checking" finished-at="2024-11-19T18:51:52 IST" duration-ms="16537">
      <class name="Reports.OnlineCounterReports">
        <test-method signature="TaxCompareTest()[pri:3, instance:Reports.OnlineCounterReports@31aa3ca5]" started-at="2024-11-19T18:51:35 IST" name="TaxCompareTest" finished-at="2024-11-19T18:51:52 IST" duration-ms="16336" status="FAIL">
          <exception class="org.openqa.selenium.ElementNotInteractableException">
            <message>
              <![CDATA[element not interactable
  (Session info: chrome=131.0.6778.70)
Build info: version: '4.19.1', revision: 'abe0ee07dc'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [4e277b93d3c12726cb47cdfbd0d5d771, clickElement {id=f.4F33714E8126E8C266C0C8DBFC4B7345.d.9DF693E4ABB1386AB1333A1AD7028CBA.e.6521}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 131.0.6778.70, chrome: {chromedriverVersion: 131.0.6778.69 (77e2244bbcda..., userDataDir: C:\Users\STHAPA~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:62654}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:62654/devtoo..., se:cdpVersion: 131.0.6778.70, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (4e277b93d3c12726cb47cdfbd0d5d771)] -> xpath: //input[@id='ContentPlaceHolder1_ChkIAgree']]
Session ID: 4e277b93d3c12726cb47cdfbd0d5d771]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.ElementNotInteractableException: element not interactable
  (Session info: chrome=131.0.6778.70)
Build info: version: '4.19.1', revision: 'abe0ee07dc'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '23.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [4e277b93d3c12726cb47cdfbd0d5d771, clickElement {id=f.4F33714E8126E8C266C0C8DBFC4B7345.d.9DF693E4ABB1386AB1333A1AD7028CBA.e.6521}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 131.0.6778.70, chrome: {chromedriverVersion: 131.0.6778.69 (77e2244bbcda..., userDataDir: C:\Users\STHAPA~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:62654}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:62654/devtoo..., se:cdpVersion: 131.0.6778.70, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Element: [[ChromeDriver: chrome on windows (4e277b93d3c12726cb47cdfbd0d5d771)] -> xpath: //input[@id='ContentPlaceHolder1_ChkIAgree']]
Session ID: 4e277b93d3c12726cb47cdfbd0d5d771
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:62)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:501)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:485)
at org.openqa.selenium.remote.ErrorCodec.decode(ErrorCodec.java:167)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:138)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:50)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:190)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:518)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:223)
at org.openqa.selenium.remote.RemoteWebElement.click(RemoteWebElement.java:76)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:51)
at jdk.proxy2/jdk.proxy2.$Proxy15.click(Unknown Source)
at pom.OnlinePaymentPage.Agree_and_proceed(OnlinePaymentPage.java:105)
at Reports.OnlineCounterReports.TaxCompareTest(OnlineCounterReports.java:93)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.ElementNotInteractableException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TaxCompareTest -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Reports.OnlineCounterReports@31aa3ca5]" started-at="2024-11-19T18:51:52 IST" name="aftermethod" finished-at="2024-11-19T18:51:52 IST" duration-ms="178" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TaxCompareTest status=FAILURE method=OnlineCounterReports.TaxCompareTest()[pri:3, instance:Reports.OnlineCounterReports@31aa3ca5] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Reports.OnlineCounterReports.TaxCompareTest() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:Reports.OnlineCounterReports@31aa3ca5]" started-at="2024-11-19T18:51:52 IST" name="tearDown" finished-at="2024-11-19T18:51:52 IST" duration-ms="20" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- Reports.OnlineCounterReports -->
    </test> <!-- Online Counter Checking -->
    <test started-at="2024-11-19T18:51:52 IST" name="All Payments" finished-at="2024-11-19T19:00:24 IST" duration-ms="512007">
      <class name="Payments.alltypepayments">
        <test-method signature="CashPayment()[pri:2, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T18:51:52 IST" name="CashPayment" finished-at="2024-11-19T18:53:28 IST" duration-ms="96084" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CashPayment -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T18:53:28 IST" name="aftermethod" finished-at="2024-11-19T18:53:28 IST" duration-ms="194" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CashPayment status=SUCCESS method=alltypepayments.CashPayment()[pri:2, instance:Payments.alltypepayments@5bd82fed] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Payments.alltypepayments.CashPayment() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="AdvancePayment()[pri:3, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T18:53:28 IST" name="AdvancePayment" finished-at="2024-11-19T18:54:24 IST" depends-on-methods="Payments.alltypepayments.CashPayment" duration-ms="55586" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AdvancePayment -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T18:54:24 IST" name="aftermethod" finished-at="2024-11-19T18:54:24 IST" duration-ms="204" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AdvancePayment status=SUCCESS method=alltypepayments.AdvancePayment()[pri:3, instance:Payments.alltypepayments@5bd82fed] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Payments.alltypepayments.AdvancePayment() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="chequePayment()[pri:4, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T18:54:24 IST" name="chequePayment" finished-at="2024-11-19T18:55:47 IST" duration-ms="82814" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chequePayment -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T18:55:47 IST" name="aftermethod" finished-at="2024-11-19T18:55:47 IST" duration-ms="192" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=chequePayment status=SUCCESS method=alltypepayments.chequePayment()[pri:4, instance:Payments.alltypepayments@5bd82fed] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Payments.alltypepayments.chequePayment() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="cheque_fail()[pri:5, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T18:55:47 IST" name="cheque_fail" finished-at="2024-11-19T18:56:32 IST" depends-on-methods="Payments.alltypepayments.chequePayment" duration-ms="44651" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cheque_fail -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T18:56:32 IST" name="aftermethod" finished-at="2024-11-19T18:56:32 IST" duration-ms="214" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=cheque_fail status=SUCCESS method=alltypepayments.cheque_fail()[pri:5, instance:Payments.alltypepayments@5bd82fed] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Payments.alltypepayments.cheque_fail() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="chequePaymentforClear()[pri:6, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T18:56:32 IST" name="chequePaymentforClear" finished-at="2024-11-19T18:57:54 IST" duration-ms="82309" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chequePaymentforClear -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T18:57:54 IST" name="aftermethod" finished-at="2024-11-19T18:57:54 IST" duration-ms="186" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=chequePaymentforClear status=SUCCESS method=alltypepayments.chequePaymentforClear()[pri:6, instance:Payments.alltypepayments@5bd82fed] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Payments.alltypepayments.chequePaymentforClear() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="cheque_clear()[pri:7, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T18:57:54 IST" name="cheque_clear" finished-at="2024-11-19T18:58:45 IST" depends-on-methods="Payments.alltypepayments.chequePaymentforClear" duration-ms="51008" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cheque_clear -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T18:58:45 IST" name="aftermethod" finished-at="2024-11-19T18:58:46 IST" duration-ms="253" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=cheque_clear status=SUCCESS method=alltypepayments.cheque_clear()[pri:7, instance:Payments.alltypepayments@5bd82fed] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Payments.alltypepayments.cheque_clear() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="Card()[pri:8, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T18:58:46 IST" name="Card" finished-at="2024-11-19T19:00:23 IST" duration-ms="97987" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Card -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T19:00:23 IST" name="aftermethod" finished-at="2024-11-19T19:00:24 IST" duration-ms="273" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Card status=SUCCESS method=alltypepayments.Card()[pri:8, instance:Payments.alltypepayments@5bd82fed] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Payments.alltypepayments.Card() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method is-config="true" signature="aftertest()[pri:0, instance:Payments.alltypepayments@5bd82fed]" started-at="2024-11-19T19:00:24 IST" name="aftertest" finished-at="2024-11-19T19:00:24 IST" duration-ms="32" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftertest -->
      </class> <!-- Payments.alltypepayments -->
    </test> <!-- All Payments -->
    <test started-at="2024-11-19T19:00:24 IST" name="Counter Reports" finished-at="2024-11-19T19:03:18 IST" duration-ms="174185">
      <class name="Reports.DownloadReports">
        <test-method signature="DownloadCounterReports()[pri:2, instance:Reports.DownloadReports@6da00fb9]" started-at="2024-11-19T19:00:24 IST" name="DownloadCounterReports" finished-at="2024-11-19T19:01:32 IST" duration-ms="67970" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DownloadCounterReports -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Reports.DownloadReports@6da00fb9]" started-at="2024-11-19T19:01:32 IST" name="aftermethod" finished-at="2024-11-19T19:01:32 IST" duration-ms="248" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DownloadCounterReports status=SUCCESS method=DownloadReports.DownloadCounterReports()[pri:2, instance:Reports.DownloadReports@6da00fb9] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Reports.DownloadReports.DownloadCounterReports() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="AssismentNakkal()[pri:3, instance:Reports.DownloadReports@6da00fb9]" started-at="2024-11-19T19:01:32 IST" name="AssismentNakkal" finished-at="2024-11-19T19:02:23 IST" duration-ms="50605" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AssismentNakkal -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Reports.DownloadReports@6da00fb9]" started-at="2024-11-19T19:02:23 IST" name="aftermethod" finished-at="2024-11-19T19:02:23 IST" duration-ms="260" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AssismentNakkal status=SUCCESS method=DownloadReports.AssismentNakkal()[pri:3, instance:Reports.DownloadReports@6da00fb9] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Reports.DownloadReports.AssismentNakkal() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="NoDueCertificate()[pri:4, instance:Reports.DownloadReports@6da00fb9]" started-at="2024-11-19T19:02:23 IST" name="NoDueCertificate" finished-at="2024-11-19T19:03:17 IST" duration-ms="53933" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NoDueCertificate -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Reports.DownloadReports@6da00fb9]" started-at="2024-11-19T19:03:17 IST" name="aftermethod" finished-at="2024-11-19T19:03:18 IST" duration-ms="1119" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=NoDueCertificate status=SUCCESS method=DownloadReports.NoDueCertificate()[pri:4, instance:Reports.DownloadReports@6da00fb9] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Reports.DownloadReports.NoDueCertificate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method is-config="true" signature="aftertest()[pri:0, instance:Reports.DownloadReports@6da00fb9]" started-at="2024-11-19T19:03:18 IST" name="aftertest" finished-at="2024-11-19T19:03:18 IST" duration-ms="42" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftertest -->
      </class> <!-- Reports.DownloadReports -->
    </test> <!-- Counter Reports -->
    <test started-at="2024-11-19T19:03:18 IST" name="MinorChanges" finished-at="2024-11-19T19:04:37 IST" duration-ms="78773">
      <class name="New_property_Wadhghat.MinorChanges">
        <test-method signature="performMinorChangeAndVerify()[pri:2, instance:New_property_Wadhghat.MinorChanges@5d2a4eed]" started-at="2024-11-19T19:03:18 IST" name="performMinorChangeAndVerify" finished-at="2024-11-19T19:04:37 IST" duration-ms="78556" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect [1234567890] but found [1234567890]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect [1234567890] but found [1234567890]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failEquals(Assert.java:1041)
at org.testng.Assert.assertNotEqualsImpl(Assert.java:147)
at org.testng.Assert.assertNotEquals(Assert.java:1531)
at org.testng.Assert.assertNotEquals(Assert.java:1535)
at New_property_Wadhghat.MinorChanges.performMinorChangeAndVerify(MinorChanges.java:152)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- performMinorChangeAndVerify -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:New_property_Wadhghat.MinorChanges@5d2a4eed]" started-at="2024-11-19T19:04:37 IST" name="aftermethod" finished-at="2024-11-19T19:04:37 IST" duration-ms="212" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=performMinorChangeAndVerify status=FAILURE method=MinorChanges.performMinorChangeAndVerify()[pri:2, instance:New_property_Wadhghat.MinorChanges@5d2a4eed] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void New_property_Wadhghat.MinorChanges.performMinorChangeAndVerify() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
      </class> <!-- New_property_Wadhghat.MinorChanges -->
    </test> <!-- MinorChanges -->
    <test started-at="2024-11-19T19:04:37 IST" name="CollectionReport" finished-at="2024-11-19T19:09:54 IST" duration-ms="317420">
      <class name="Reports.CollectionReports">
        <test-method signature="chequeBounceCollectionReport()[pri:2, instance:Reports.CollectionReports@5bc9ba1d]" started-at="2024-11-19T19:04:37 IST" name="chequeBounceCollectionReport" finished-at="2024-11-19T19:05:56 IST" duration-ms="79507" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chequeBounceCollectionReport -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Reports.CollectionReports@5bc9ba1d]" started-at="2024-11-19T19:05:56 IST" name="aftermethod" finished-at="2024-11-19T19:05:57 IST" duration-ms="352" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=chequeBounceCollectionReport status=SUCCESS method=CollectionReports.chequeBounceCollectionReport()[pri:2, instance:Reports.CollectionReports@5bc9ba1d] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Reports.CollectionReports.chequeBounceCollectionReport() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="chequeClearedCollectionReport()[pri:3, instance:Reports.CollectionReports@5bc9ba1d]" started-at="2024-11-19T19:05:57 IST" name="chequeClearedCollectionReport" finished-at="2024-11-19T19:07:14 IST" duration-ms="76951" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chequeClearedCollectionReport -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Reports.CollectionReports@5bc9ba1d]" started-at="2024-11-19T19:07:14 IST" name="aftermethod" finished-at="2024-11-19T19:07:14 IST" duration-ms="439" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=chequeClearedCollectionReport status=SUCCESS method=CollectionReports.chequeClearedCollectionReport()[pri:3, instance:Reports.CollectionReports@5bc9ba1d] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Reports.CollectionReports.chequeClearedCollectionReport() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="chequeInProcessCollectionReport()[pri:4, instance:Reports.CollectionReports@5bc9ba1d]" started-at="2024-11-19T19:07:14 IST" name="chequeInProcessCollectionReport" finished-at="2024-11-19T19:08:33 IST" duration-ms="79253" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- chequeInProcessCollectionReport -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Reports.CollectionReports@5bc9ba1d]" started-at="2024-11-19T19:08:33 IST" name="aftermethod" finished-at="2024-11-19T19:08:34 IST" duration-ms="877" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=chequeInProcessCollectionReport status=SUCCESS method=CollectionReports.chequeInProcessCollectionReport()[pri:4, instance:Reports.CollectionReports@5bc9ba1d] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Reports.CollectionReports.chequeInProcessCollectionReport() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="DailyCollectionReport()[pri:5, instance:Reports.CollectionReports@5bc9ba1d]" started-at="2024-11-19T19:08:34 IST" name="DailyCollectionReport" finished-at="2024-11-19T19:09:15 IST" duration-ms="40722" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DailyCollectionReport -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Reports.CollectionReports@5bc9ba1d]" started-at="2024-11-19T19:09:15 IST" name="aftermethod" finished-at="2024-11-19T19:09:15 IST" duration-ms="258" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DailyCollectionReport status=SUCCESS method=CollectionReports.DailyCollectionReport()[pri:5, instance:Reports.CollectionReports@5bc9ba1d] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Reports.CollectionReports.DailyCollectionReport() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method signature="MonthlyCollectionReport()[pri:5, instance:Reports.CollectionReports@5bc9ba1d]" started-at="2024-11-19T19:09:15 IST" name="MonthlyCollectionReport" finished-at="2024-11-19T19:09:54 IST" duration-ms="38799" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MonthlyCollectionReport -->
        <test-method is-config="true" signature="aftermethod(org.testng.ITestResult,java.lang.reflect.Method)[pri:0, instance:Reports.CollectionReports@5bc9ba1d]" started-at="2024-11-19T19:09:54 IST" name="aftermethod" finished-at="2024-11-19T19:09:54 IST" duration-ms="226" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=MonthlyCollectionReport status=SUCCESS method=CollectionReports.MonthlyCollectionReport()[pri:5, instance:Reports.CollectionReports@5bc9ba1d] output={null}]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void Reports.CollectionReports.MonthlyCollectionReport() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:Reports.CollectionReports@5bc9ba1d]" started-at="2024-11-19T19:09:54 IST" name="tearDown" finished-at="2024-11-19T19:09:54 IST" duration-ms="28" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- Reports.CollectionReports -->
    </test> <!-- CollectionReport -->
    <test started-at="2024-11-19T19:09:54 IST" name="ReportEngine" finished-at="2024-11-19T19:11:43 IST" duration-ms="109089">
      <class name="Reports.ReportEngine">
        <test-method signature="Notice_report()[pri:2, instance:Reports.ReportEngine@6f0b0a5e]" started-at="2024-11-19T19:09:54 IST" name="Notice_report" finished-at="2024-11-19T19:10:49 IST" duration-ms="55155" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Notice_report -->
        <test-method signature="Karakarni_report()[pri:3, instance:Reports.ReportEngine@6f0b0a5e]" started-at="2024-11-19T19:10:49 IST" name="Karakarni_report" finished-at="2024-11-19T19:11:43 IST" duration-ms="53874" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Karakarni_report -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:Reports.ReportEngine@6f0b0a5e]" started-at="2024-11-19T19:11:43 IST" name="tearDown" finished-at="2024-11-19T19:11:43 IST" duration-ms="55" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- Reports.ReportEngine -->
    </test> <!-- ReportEngine -->
  </suite> <!-- Suite -->
</testng-results>
